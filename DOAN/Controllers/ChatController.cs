using Microsoft.AspNetCore.Mvc;
using DOAN.Models;

namespace DOAN.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ChatController : ControllerBase
    {
        private readonly ILogger<ChatController> _logger;

        public ChatController(ILogger<ChatController> logger)
        {
            _logger = logger;
        }

        [HttpPost("send")]
        public IActionResult SendMessage([FromBody] ChatMessage message)
        {
            try
            {
                if (string.IsNullOrEmpty(message.Text))
                {
                    return BadRequest(new { success = false, message = "Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
                }

                // Simulate AI response
                var response = GetBotResponse(message.Text);
                
                return Ok(new { 
                    success = true, 
                    response = response,
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error processing chat message");
                return StatusCode(500, new { success = false, message = "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn" });
            }
        }

        [HttpGet("status")]
        public IActionResult GetStatus()
        {
            return Ok(new { 
                online = true, 
                message = "H·ªó tr·ª£ kh√°ch h√†ng ƒëang ho·∫°t ƒë·ªông",
                responseTime = "Trong v√≤ng 1 ph√∫t"
            });
        }

        private string GetBotResponse(string userMessage)
        {
            var responses = new Dictionary<string, string>
            {
                ["s·∫£n ph·∫©m"] = "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c s·∫£n ph·∫©m. B·∫°n quan t√¢m ƒë·∫øn s·∫£n ph·∫©m n√†o c·ª• th·ªÉ?",
                ["ƒë∆°n h√†ng"] = "T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ ƒë∆°n h√†ng. Vui l√≤ng cung c·∫•p m√£ ƒë∆°n h√†ng ho·∫∑c th√¥ng tin li√™n quan.",
                ["t∆∞ v·∫•n"] = "T√¥i s·∫µn s√†ng t∆∞ v·∫•n cho b·∫°n! B·∫°n ƒëang t√¨m ki·∫øm s·∫£n ph·∫©m g√¨?",
                ["k·ªπ thu·∫≠t"] = "T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ c√°c v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. H√£y m√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ b·∫°n g·∫∑p ph·∫£i.",
                ["gi√°"] = "B·∫°n c√≥ th·ªÉ xem gi√° s·∫£n ph·∫©m tr√™n trang s·∫£n ph·∫©m. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n so s√°nh gi√° c√°c s·∫£n ph·∫©m.",
                ["giao h√†ng"] = "Ch√∫ng t√¥i giao h√†ng to√†n qu·ªëc. Th·ªùi gian giao h√†ng t·ª´ 1-3 ng√†y l√†m vi·ªác.",
                ["b·∫£o h√†nh"] = "T·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÅu c√≥ b·∫£o h√†nh ch√≠nh h√£ng. Th·ªùi gian b·∫£o h√†nh t√πy theo t·ª´ng s·∫£n ph·∫©m.",
                ["ƒë·ªïi tr·∫£"] = "B·∫°n c√≥ th·ªÉ ƒë·ªïi tr·∫£ s·∫£n ph·∫©m trong v√≤ng 7 ng√†y n·∫øu s·∫£n ph·∫©m c√≤n nguy√™n v·∫πn.",
                ["iphone"] = "iPhone l√† s·∫£n ph·∫©m cao c·∫•p c·ªßa Apple v·ªõi hi·ªáu nƒÉng m·∫°nh m·∫Ω v√† camera ch·∫•t l∆∞·ª£ng cao. B·∫°n quan t√¢m ƒë·∫øn model n√†o?",
                ["samsung"] = "Samsung Galaxy series c√≥ nhi·ªÅu t√πy ch·ªçn t·ª´ t·∫ßm trung ƒë·∫øn cao c·∫•p. B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ model n√†o?",
                ["laptop"] = "Ch√∫ng t√¥i c√≥ nhi·ªÅu d√≤ng laptop t·ª´ Apple, Dell, HP v·ªõi c·∫•u h√¨nh ƒëa d·∫°ng. B·∫°n c·∫ßn laptop cho m·ª•c ƒë√≠ch g√¨?",
                ["macbook"] = "MacBook Pro v√† MacBook Air l√† l·ª±a ch·ªçn tuy·ªát v·ªùi cho c√¥ng vi·ªác v√† s√°ng t·∫°o. B·∫°n c·∫ßn c·∫•u h√¨nh nh∆∞ th·∫ø n√†o?",
                ["airpods"] = "AirPods Pro v√† AirPods 3 c√≥ ch·∫•t l∆∞·ª£ng √¢m thanh tuy·ªát v·ªùi v√† t√≠nh nƒÉng ch·ªëng ·ªìn. B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ model n√†o?",
                ["ƒë·ªìng h·ªì"] = "Apple Watch v√† Samsung Galaxy Watch c√≥ nhi·ªÅu t√≠nh nƒÉng th√¥ng minh. B·∫°n quan t√¢m ƒë·∫øn t√≠nh nƒÉng n√†o?",
                ["xin ch√†o"] = "Xin ch√†o! üëã T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?",
                ["c·∫£m ∆°n"] = "Kh√¥ng c√≥ g√¨! üòä T√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n. B·∫°n c√≤n c·∫ßn gi√∫p g√¨ kh√°c kh√¥ng?",
                ["t·∫°m bi·ªát"] = "T·∫°m bi·ªát! üëã Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh. H·∫πn g·∫∑p l·∫°i b·∫°n l·∫ßn sau!",
                ["gi·ªù m·ªü c·ª≠a"] = "C·ª≠a h√†ng m·ªü c·ª≠a t·ª´ 8:00 - 22:00 h√†ng ng√†y. Hotline h·ªó tr·ª£ 24/7: 1900 1234",
                ["ƒë·ªãa ch·ªâ"] = "C·ª≠a h√†ng ch√∫ng t√¥i t·∫°i: 123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM. B·∫°n c√≥ th·ªÉ ƒë·∫øn tr·ª±c ti·∫øp ho·∫∑c mua online.",
                ["thanh to√°n"] = "Ch√∫ng t√¥i h·ªó tr·ª£ nhi·ªÅu ph∆∞∆°ng th·ª©c thanh to√°n: COD, chuy·ªÉn kho·∫£n, v√≠ ƒëi·ªán t·ª≠ MoMo, th·∫ª t√≠n d·ª•ng."
            };

            var lowerMessage = userMessage.ToLower();
            
            // T√¨m t·ª´ kh√≥a ph√π h·ª£p nh·∫•t
            foreach (var kvp in responses)
            {
                if (lowerMessage.Contains(kvp.Key))
                {
                    return kvp.Value;
                }
            }

            // Ph·∫£n h·ªìi m·∫∑c ƒë·ªãnh
            var defaultResponses = new[]
            {
                "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i ƒë√£ ghi nh·∫≠n c√¢u h·ªèi c·ªßa b·∫°n. ƒê·ªôi ng≈© h·ªó tr·ª£ s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t c√≥ th·ªÉ.",
                "T√¥i hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t, b·∫°n c√≥ th·ªÉ g·ªçi hotline 1900 1234 ho·∫∑c m√¥ t·∫£ chi ti·∫øt h∆°n.",
                "C√¢u h·ªèi c·ªßa b·∫°n r·∫•t hay! T√¥i s·∫Ω chuy·ªÉn th√¥ng tin n√†y cho ƒë·ªôi ng≈© chuy√™n m√¥n ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n ch√≠nh x√°c nh·∫•t.",
                "C·∫£m ∆°n b·∫°n! T√¥i ƒë√£ ghi nh·∫≠n y√™u c·∫ßu. B·∫°n c√≥ th·ªÉ li√™n h·ªá hotline 1900 1234 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp.",
                "T√¥i ƒë√£ hi·ªÉu v·∫•n ƒë·ªÅ c·ªßa b·∫°n. ƒê·ªÉ ƒë∆∞·ª£c gi·∫£i ƒë√°p chi ti·∫øt, b·∫°n c√≥ th·ªÉ m√¥ t·∫£ th√™m ho·∫∑c g·ªçi hotline h·ªó tr·ª£."
            };

            var random = new Random();
            return defaultResponses[random.Next(defaultResponses.Length)];
        }
    }

    public class ChatMessage
    {
        public string Text { get; set; } = string.Empty;
        public string? SessionId { get; set; }
        public DateTime Timestamp { get; set; } = DateTime.Now;
    }
}
