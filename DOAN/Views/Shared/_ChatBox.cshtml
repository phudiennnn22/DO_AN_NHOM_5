<!-- Chat Box -->
<div id="chatBox" class="chat-box">
    <!-- Chat Header -->
    <div class="chat-header" id="chatHeader">
        <div class="d-flex align-items-center">
            <div class="chat-avatar">
                <i class="fas fa-user-headset"></i>
            </div>
            <div class="chat-info">
                <h6 class="mb-0">H·ªó tr·ª£ kh√°ch h√†ng</h6>
                <small class="text-success">
                    <i class="fas fa-circle"></i> ƒêang ho·∫°t ƒë·ªông
                </small>
            </div>
        </div>
        <div class="chat-controls">
            <button class="btn btn-sm btn-outline-light" id="minimizeChat">
                <i class="fas fa-minus"></i>
            </button>
            <button class="btn btn-sm btn-outline-light" id="closeChat">
                <i class="fas fa-times"></i>
            </button>
        </div>
    </div>

    <!-- Chat Body -->
    <div class="chat-body" id="chatBody">
        <div class="chat-messages" id="chatMessages">
            <!-- Welcome Message -->
            <div class="message bot-message">
                <div class="message-avatar">
                    <i class="fas fa-robot"></i>
                </div>
                <div class="message-content">
                    <div class="message-bubble">
                        <p>Xin ch√†o! üëã T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?</p>
                        <small class="message-time">V·ª´a xong</small>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="quick-actions">
                <button class="quick-action-btn" data-message="T√¥i mu·ªën h·ªèi v·ªÅ s·∫£n ph·∫©m">
                    <i class="fas fa-box"></i> H·ªèi v·ªÅ s·∫£n ph·∫©m
                </button>
                <button class="quick-action-btn" data-message="T√¥i c·∫ßn h·ªó tr·ª£ ƒë∆°n h√†ng">
                    <i class="fas fa-shopping-cart"></i> H·ªó tr·ª£ ƒë∆°n h√†ng
                </button>
                <button class="quick-action-btn" data-message="T√¥i mu·ªën t∆∞ v·∫•n mua h√†ng">
                    <i class="fas fa-user-tie"></i> T∆∞ v·∫•n mua h√†ng
                </button>
                <button class="quick-action-btn" data-message="T√¥i c√≥ v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t">
                    <i class="fas fa-tools"></i> V·∫•n ƒë·ªÅ k·ªπ thu·∫≠t
                </button>
            </div>
        </div>
    </div>

    <!-- Chat Input -->
    <div class="chat-input">
        <div class="input-group">
            <input type="text" class="form-control" id="chatInput" placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n...">
            <button class="btn btn-primary" type="button" id="sendMessage">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
        <div class="chat-typing" id="chatTyping" style="display: none;">
            <small class="text-muted">
                <i class="fas fa-circle"></i>
                <i class="fas fa-circle"></i>
                <i class="fas fa-circle"></i>
                ƒêang nh·∫≠p...
            </small>
        </div>
    </div>
</div>

<!-- Chat Toggle Button -->
<button class="chat-toggle" id="chatToggle">
    <i class="fas fa-comments"></i>
    <span class="chat-badge" id="chatBadge" style="display: none;">1</span>
</button>

<style>
/* Chat Box Styles */
.chat-box {
    position: fixed;
    bottom: 20px;
    right: 20px;
    width: 350px;
    height: 500px;
    background: white;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    display: none;
    flex-direction: column;
    z-index: 1000;
    overflow: hidden;
    border: 1px solid #e9ecef;
}

.chat-box.show {
    display: flex;
}

.chat-header {
    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
    color: white;
    padding: 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.chat-avatar {
    width: 40px;
    height: 40px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 10px;
}

.chat-info h6 {
    font-size: 14px;
    font-weight: 600;
}

.chat-info small {
    font-size: 11px;
    opacity: 0.9;
}

.chat-controls {
    display: flex;
    gap: 5px;
}

.chat-controls .btn {
    width: 30px;
    height: 30px;
    padding: 0;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.chat-body {
    flex: 1;
    overflow-y: auto;
    padding: 15px;
    background: #f8f9fa;
}

.chat-messages {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.message {
    display: flex;
    gap: 10px;
    align-items: flex-end;
}

.message-avatar {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    flex-shrink: 0;
}

.bot-message .message-avatar {
    background: #007bff;
    color: white;
}

.user-message .message-avatar {
    background: #28a745;
    color: white;
}

.message-content {
    flex: 1;
}

.message-bubble {
    background: white;
    padding: 12px 15px;
    border-radius: 18px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    max-width: 80%;
}

.user-message .message-bubble {
    background: #007bff;
    color: white;
    margin-left: auto;
}

.message-bubble p {
    margin: 0;
    font-size: 14px;
    line-height: 1.4;
}

.message-time {
    font-size: 11px;
    opacity: 0.7;
    margin-top: 5px;
    display: block;
}

.quick-actions {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 8px;
    margin-top: 10px;
}

.quick-action-btn {
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 20px;
    padding: 8px 12px;
    font-size: 12px;
    color: #495057;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 5px;
}

.quick-action-btn:hover {
    background: #007bff;
    color: white;
    border-color: #007bff;
    transform: translateY(-1px);
}

.chat-input {
    padding: 15px;
    background: white;
    border-top: 1px solid #e9ecef;
}

.chat-input .input-group {
    margin-bottom: 5px;
}

.chat-input .form-control {
    border-radius: 25px;
    border: 1px solid #dee2e6;
    padding: 10px 15px;
    font-size: 14px;
}

.chat-input .form-control:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

.chat-input .btn {
    border-radius: 50%;
    width: 40px;
    height: 40px;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
}

.chat-typing {
    text-align: center;
    padding: 5px;
}

.chat-typing i {
    animation: typing 1.4s infinite;
    margin: 0 1px;
}

.chat-typing i:nth-child(2) {
    animation-delay: 0.2s;
}

.chat-typing i:nth-child(3) {
    animation-delay: 0.4s;
}

@@keyframes typing {
    0%, 60%, 100% {
        opacity: 0.3;
    }
    30% {
        opacity: 1;
    }
}

/* Chat Toggle Button */
.chat-toggle {
    position: fixed;
    bottom: 20px;
    right: 20px;
    width: 60px;
    height: 60px;
    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
    color: white;
    border: none;
    border-radius: 50%;
    box-shadow: 0 4px 15px rgba(0, 123, 255, 0.4);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    transition: all 0.3s ease;
    z-index: 1001;
}

.chat-toggle:hover {
    transform: scale(1.1);
    box-shadow: 0 6px 20px rgba(0, 123, 255, 0.6);
}

.chat-badge {
    position: absolute;
    top: -5px;
    right: -5px;
    background: #dc3545;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    font-size: 11px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
}

/* Responsive */
@@media (max-width: 768px) {
    .chat-box {
        width: 100%;
        height: 100%;
        bottom: 0;
        right: 0;
        border-radius: 0;
    }
    
    .chat-toggle {
        bottom: 15px;
        right: 15px;
        width: 50px;
        height: 50px;
        font-size: 20px;
    }
}
</style>

<script>
$(document).ready(function() {
    const chatBox = $('#chatBox');
    const chatToggle = $('#chatToggle');
    const chatHeader = $('#chatHeader');
    const chatBody = $('#chatBody');
    const chatMessages = $('#chatMessages');
    const chatInput = $('#chatInput');
    const sendButton = $('#sendMessage');
    const chatTyping = $('#chatTyping');
    const chatBadge = $('#chatBadge');
    const minimizeBtn = $('#minimizeChat');
    const closeBtn = $('#closeChat');

    let isMinimized = false;
    let messageCount = 0;

    // Toggle chat box
    chatToggle.click(function() {
        if (chatBox.hasClass('show')) {
            hideChat();
        } else {
            showChat();
        }
    });

    // Minimize chat
    minimizeBtn.click(function() {
        if (isMinimized) {
            chatBody.show();
            chatInput.parent().show();
            minimizeBtn.html('<i class="fas fa-minus"></i>');
            isMinimized = false;
        } else {
            chatBody.hide();
            chatInput.parent().hide();
            minimizeBtn.html('<i class="fas fa-plus"></i>');
            isMinimized = true;
        }
    });

    // Close chat
    closeBtn.click(function() {
        hideChat();
    });

    // Send message
    function sendMessage() {
        const message = chatInput.val().trim();
        if (message) {
            addUserMessage(message);
            chatInput.val('');
            showTyping();
            
            // Send to API
            $.ajax({
                url: '/api/chat/send',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    text: message,
                    sessionId: getSessionId(),
                    timestamp: new Date().toISOString()
                }),
                success: function(response) {
                    hideTyping();
                    if (response.success) {
                        addBotMessage(response.response);
                    } else {
                        addBotMessage('Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.');
                    }
                },
                error: function() {
                    hideTyping();
                    addBotMessage('Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c g·ªçi hotline 1900 1234.');
                }
            });
        }
    }

    // Send button click
    sendButton.click(sendMessage);

    // Enter key press
    chatInput.keypress(function(e) {
        if (e.which === 13) {
            sendMessage();
        }
    });

    // Quick action buttons
    $('.quick-action-btn').click(function() {
        const message = $(this).data('message');
        addUserMessage(message);
        showTyping();
        
        // Send to API
        $.ajax({
            url: '/api/chat/send',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                text: message,
                sessionId: getSessionId(),
                timestamp: new Date().toISOString()
            }),
            success: function(response) {
                hideTyping();
                if (response.success) {
                    addBotMessage(response.response);
                } else {
                    addBotMessage('Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.');
                }
            },
            error: function() {
                hideTyping();
                addBotMessage('Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c g·ªçi hotline 1900 1234.');
            }
        });
    });

    // Add user message
    function addUserMessage(message) {
        const messageHtml = `
            <div class="message user-message">
                <div class="message-avatar">
                    <i class="fas fa-user"></i>
                </div>
                <div class="message-content">
                    <div class="message-bubble">
                        <p>${message}</p>
                        <small class="message-time">V·ª´a xong</small>
                    </div>
                </div>
            </div>
        `;
        chatMessages.append(messageHtml);
        scrollToBottom();
    }

    // Add bot message
    function addBotMessage(message) {
        const messageHtml = `
            <div class="message bot-message">
                <div class="message-avatar">
                    <i class="fas fa-robot"></i>
                </div>
                <div class="message-content">
                    <div class="message-bubble">
                        <p>${message}</p>
                        <small class="message-time">V·ª´a xong</small>
                    </div>
                </div>
            </div>
        `;
        chatMessages.append(messageHtml);
        scrollToBottom();
    }

    // Show typing indicator
    function showTyping() {
        chatTyping.show();
        scrollToBottom();
    }

    // Hide typing indicator
    function hideTyping() {
        chatTyping.hide();
    }

    // Scroll to bottom
    function scrollToBottom() {
        chatBody.scrollTop(chatBody[0].scrollHeight);
    }

    // Show chat
    function showChat() {
        chatBox.addClass('show');
        chatToggle.hide();
        chatBadge.hide();
        messageCount = 0;
        chatInput.focus();
    }

    // Hide chat
    function hideChat() {
        chatBox.removeClass('show');
        chatToggle.show();
    }

    // Get session ID
    function getSessionId() {
        let sessionId = localStorage.getItem('chatSessionId');
        if (!sessionId) {
            sessionId = 'chat_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            localStorage.setItem('chatSessionId', sessionId);
        }
        return sessionId;
    }

    // Show notification badge
    function showNotification() {
        if (!chatBox.hasClass('show')) {
            messageCount++;
            chatBadge.text(messageCount).show();
        }
    }

    // Simulate incoming message (for demo)
    setTimeout(() => {
        if (!chatBox.hasClass('show')) {
            showNotification();
        }
    }, 10000);
});
</script>
